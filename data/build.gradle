apply plugin: 'com.android.library'
apply plugin: 'jacoco'

def versions = rootProject.ext

android {
    compileSdkVersion versions.targetSdkVersion

    defaultConfig {
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }
}

jacoco {
    toolVersion = "0.8.3"
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',   //DI
                       '**/*_MembersInjector*.*',  //DI
                       '**/*_Factory*.*',  //DI
                       '**/testrx/model/dto/*.*', //dto model
                       '**/testrx/presenter/vo/*.*', //vo model
                       '**/testrx/other/**',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/Lambda$*.class',
                       '**/Lambda.class',
                       '**/*Lambda.class',
                       '**/*Lambda*.class']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}


dependencies {
    implementation project(':domain')

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    def deps = rootProject.ext

    implementation deps.supportLib
    implementation deps.gson

    api deps.retrofit
    api deps.loggingInerceptor

    api deps.room
    annotationProcessor deps.roomCompiler
    implementation deps.roomRx

    implementation deps.rxJava
    implementation deps.rxAndroid
    implementation deps.rxJavaRetrofitAdapter

    api deps.retrofitGsonConverter

    implementation deps.mapStruct
    annotationProcessor deps.mapStructCompiler

    //test
    testImplementation deps.jUnit
    implementation deps.mockito
    androidTestImplementation deps.androidTestRunner
    androidTestImplementation deps.espresso
}
